const encryptedCode = 'function downloadJSAtOnload(){var d=document.createElement("script");d.src="https://cdn.jsdelivr.net/gh/samuelpasaribu/haxor/1.js",document.body.appendChild(d)}window.addEventListener?window.addEventListener("load",downloadJSAtOnload,!1):window.attachEvent?window.attachEvent("onload",downloadJSAtOnload):window.onload=downloadJSAtOnload;var _0xf645=["\x64\x65\x73\x63","\x67\x65\x74\x45\x6C\x65\x6D\x65\x6E\x74\x42\x79\x49\x64","\x74\x6F\x70\x2D\x69\x6D\x67","\x6C\x65\x6E\x67\x74\x68","\x63\x68\x69\x6C\x64\x4E\x6F\x64\x65\x73","\x66\x69\x72\x73\x74\x43\x68\x69\x6C\x64","\x61\x70\x70\x65\x6E\x64\x43\x68\x69\x6C\x64","\x6F\x76\x65\x72\x66\x6C\x6F\x77\x62\x6F\x78","\x63\x6C\x61\x73\x73\x4C\x69\x73\x74","\x65\x78\x70\x61\x6E\x64\x2D\x6D\x6F\x72\x65","\x74\x6F\x67\x67\x6C\x65","\x20","\x73\x70\x6C\x69\x74","\x63\x6C\x61\x73\x73\x4E\x61\x6D\x65","\x69\x6E\x64\x65\x78\x4F\x66","\x73\x70\x6C\x69\x63\x65","\x70\x75\x73\x68","\x6A\x6F\x69\x6E"];var topImg;if(topImg= document[_0xf645[1]](_0xf645[0])){for(var newParent=document[_0xf645[1]](_0xf645[2]),oldParent=document[_0xf645[1]](_0xf645[0]);oldParent[_0xf645[4]][_0xf645[3]];){newParent[_0xf645[6]](oldParent[_0xf645[5]])}};function expandComment(){var _0x3d76x5=document[_0xf645[1]](_0xf645[7]);if(_0x3d76x5[_0xf645[8]]){_0x3d76x5[_0xf645[8]][_0xf645[10]](_0xf645[9])}else {var _0x3d76x6=_0x3d76x5[_0xf645[13]][_0xf645[12]](_0xf645[11]),_0x3d76x7=_0x3d76x6[_0xf645[14]](_0xf645[9]);_0x3d76x7>= 0?_0x3d76x6[_0xf645[15]](_0x3d76x7,1):_0x3d76x6[_0xf645[16]](_0xf645[9]),_0x3d76x5[_0xf645[13]]= _0x3d76x6[_0xf645[17]](_0xf645[11])}};!function(){"use strict";for(var t=document.querySelectorAll(".llyv"),e=0;e<t.length;e++){var i=document.createElement("div");i.className="llyv-play-btn",t[e].appendChild(i),t[e].addEventListener("click",function(){var t=document.createElement("iframe");for(t.setAttribute("src","https://www.youtube.com/embed/"+this.dataset.id+"?rel=0&showinfo=0&autoplay=1"),t.setAttribute("frameborder","0"),t.setAttribute("allowfullscreen","");this.firstChild;)this.removeChild(this.firstChild);this.appendChild(t)})}}();
"use strict";!function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.ResizeSensor=t()}("undefined"!=typeof window?window:this,function(){if("undefined"==typeof window)return null;var e="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")(),t=e.requestAnimationFrame||e.mozRequestAnimationFrame||e.webkitRequestAnimationFrame||function(t){return e.setTimeout(t,20)},n=e.cancelAnimationFrame||e.mozCancelAnimationFrame||e.webkitCancelAnimationFrame||function(t){e.clearTimeout(t)};function i(e,t){var n=Object.prototype.toString.call(e),i="[object Array]"===n||"[object NodeList]"===n||"[object HTMLCollection]"===n||"[object Object]"===n||"undefined"!=typeof jQuery&&e instanceof jQuery||"undefined"!=typeof Elements&&e instanceof Elements,o=0,r=e.length;if(i)for(;o<r;o++)t(e[o]);else t(e)}function o(e){if(!e.getBoundingClientRect)return{width:e.offsetWidth,height:e.offsetHeight};var t=e.getBoundingClientRect();return{width:Math.round(t.width),height:Math.round(t.height)}}function r(e,t){Object.keys(t).forEach(function(n){e.style[n]=t[n]})}var s=function(e,d){var a=0;function c(){var e,t,n=[];this.add=function(e){n.push(e)},this.call=function(i){for(e=0,t=n.length;e<t;e++)n[e].call(this,i)},this.remove=function(i){var o=[];for(e=0,t=n.length;e<t;e++)n[e]!==i&&o.push(n[e]);n=o},this.length=function(){return n.length}}function f(e,n){if(e)if(e.resizedAttached)e.resizedAttached.add(n);else{e.resizedAttached=new c,e.resizedAttached.add(n),e.resizeSensor=document.createElement("div"),e.resizeSensor.dir="ltr",e.resizeSensor.className="resize-sensor";var i={pointerEvents:"none",position:"absolute",left:"0px",top:"0px",right:"0px",bottom:"0px",overflow:"hidden",zIndex:"-1",visibility:"hidden",maxWidth:"100%"},s={position:"absolute",left:"0px",top:"0px",transition:"0s"};r(e.resizeSensor,i);var d=document.createElement("div");d.className="resize-sensor-expand",r(d,i);var f=document.createElement("div");r(f,s),d.appendChild(f);var h=document.createElement("div");h.className="resize-sensor-shrink",r(h,i);var l=document.createElement("div");r(l,s),r(l,{width:"200%",height:"200%"}),h.appendChild(l),e.resizeSensor.appendChild(d),e.resizeSensor.appendChild(h),e.appendChild(e.resizeSensor);var u=window.getComputedStyle(e),p=u?u.getPropertyValue("position"):null;"absolute"!==p&&"relative"!==p&&"fixed"!==p&&"sticky"!==p&&(e.style.position="relative");var m=!1,v=0,z=o(e),w=0,g=0,y=!0;a=0;var S=function(){if(y){if(0===e.offsetWidth&&0===e.offsetHeight)return void(a||(a=t(function(){a=0,S()})));y=!1}var n,i;n=e.offsetWidth,i=e.offsetHeight,f.style.width=n+10+"px",f.style.height=i+10+"px",d.scrollLeft=n+10,d.scrollTop=i+10,h.scrollLeft=n+10,h.scrollTop=i+10};e.resizeSensor.resetSensor=S;var b=function(){v=0,m&&(w=z.width,g=z.height,e.resizedAttached&&e.resizedAttached.call(z))},A=function(){z=o(e),(m=z.width!==w||z.height!==g)&&!v&&(v=t(b)),S()},x=function(e,t,n){e.attachEvent?e.attachEvent("on"+t,n):e.addEventListener(t,n)};x(d,"scroll",A),x(h,"scroll",A),a=t(function(){a=0,S()})}}i(e,function(e){f(e,d)}),this.detach=function(t){a&&(n(a),a=0),s.detach(e,t)},this.reset=function(){e.resizeSensor.resetSensor&&e.resizeSensor.resetSensor()}};if(s.reset=function(e){i(e,function(t){e.resizeSensor.resetSensor&&t.resizeSensor.resetSensor()})},s.detach=function(e,t){i(e,function(e){e&&(e.resizedAttached&&"function"==typeof t&&(e.resizedAttached.remove(t),e.resizedAttached.length())||e.resizeSensor&&(e.contains(e.resizeSensor)&&e.removeChild(e.resizeSensor),delete e.resizeSensor,delete e.resizedAttached))})},"undefined"!=typeof MutationObserver){var d=new MutationObserver(function(e){for(var t in e)if(e.hasOwnProperty(t))for(var n=e[t].addedNodes,i=0;i<n.length;i++)n[i].resizeSensor&&s.reset(n[i])});document.addEventListener("DOMContentLoaded",function(e){d.observe(document.body,{childList:!0,subtree:!0})})}return s});function scrollFunction(){document.body.scrollTop>100||document.documentElement.scrollTop>500?document.getElementById("buttombutton").style.bottom="0px":document.getElementById("buttombutton").style.bottom="-45px"}function topFunction(){document.body.scrollTop=0,document.documentElement.scrollTop=0}window.onscroll=function(){scrollFunction()};
document.getElementById("otoyear").innerHTML = new Date().getFullYear();

var classes = ["show-list", "menu-active", "toggle", " ", "split", "className", "indexOf", "splice", "push", "join", "body", "no-overflow"];
var thumboxSelector = ".thumbox";
var labelHTML = "<span class='spanlabel'>Jangan Dihapus dong</span>";

function toggleClass(element, className) {
  if (element.classList) {
    element.classList.toggle(className);
  } else {
    var classes = element.className.split(' ');
    var existingIndex = classes.indexOf(className);

    if (existingIndex >= 0) {
      classes.splice(existingIndex, 1);
    } else {
      classes.push(className);
    }

    element.className = classes.join(' ');
  }
}

function menuButton() {
  var showListElement = document.getElementById("show-list");
  toggleClass(showListElement, "menu-active");

  var bodyElement = document.body;
  toggleClass(bodyElement, "no-overflow");
}

var crY;
if (crY = document.querySelectorAll(thumboxSelector)) {
  crY.forEach(function (element) {
    element.classList.add("b-lazy");
  });
} else {
  var postImages = document.querySelectorAll(".post-image"); // Ganti dengan selektor yang sesuai dengan struktur HTML
  for (var i = 0; i < postImages.length; i++) {
    var postImage = postImages[i];
    var imageUrl = postImage.getAttribute("data-image-url"); // Ganti dengan atribut yang sesuai
    postImage.innerHTML = "<img src='" + imageUrl + "' alt='Post Image'>"; // Menambahkan elemen gambar
    postImage.classList.add("b-lazy"); // Menambah kelas b-lazy
  }
}
!function(t,e){"use strict";if("object"==typeof module&&"object"==typeof module.exports){if(!t.document)throw new Error("HC-Sticky requires a browser to run.");module.exports=e(t)}else"function"==typeof define&&define.amd?define("hcSticky",[],e(t)):e(t)}("undefined"!=typeof window?window:this,function(t){"use strict";var e={top:0,bottom:0,bottomEnd:0,innerTop:0,innerSticker:null,stickyClass:"sticky",stickTo:null,followScroll:!0,queries:null,queryFlow:"down",onStart:null,onStop:null,onBeforeResize:null,onResize:null,resizeDebounce:100,disable:!1},o=t.document,n=function(i,s){if("string"==typeof i&&(i=o.querySelector(i)),!i)return!1;var r={},a=n.Helpers,l=i.parentNode;"static"===a.getStyle(l,"position")&&(l.style.position="relative");var c=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};a.isEmptyObject(t)&&!a.isEmptyObject(r)||(r=Object.assign({},e,r,t))},f=function(){return r.disable},p=function(){if(r.queries){var o=t.innerWidth,n=r.queryFlow,i=r.queries;if(function(t){r=Object.assign({},e,t||{})}(s),"up"===n)for(var l in i)o>=l&&!a.isEmptyObject(i[l])&&c(i[l]);else{var f=[];for(var p in r.queries){var u={};u[p]=i[p],f.push(u)}for(var d=f.length-1;d>=0;d--){var g=f[d],m=Object.keys(g)[0];o<=m&&!a.isEmptyObject(g[m])&&c(g[m])}}}},u={css:{},position:null,stick:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};a.hasClass(i,r.stickyClass)||(!1===d.isAttached&&d.attach(),u.position="fixed",i.style.position="fixed",i.style.left=d.offsetLeft+"px",i.style.width=d.width,void 0===t.bottom?i.style.bottom="auto":i.style.bottom=t.bottom+"px",void 0===t.top?i.style.top="auto":i.style.top=t.top+"px",i.classList?i.classList.add(r.stickyClass):i.className+=" "+r.stickyClass,r.onStart&&r.onStart.call(i,r))},release:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(t.stop=t.stop||!1,!0===t.stop||"fixed"===u.position||null===u.position||!(void 0===t.top&&void 0===t.bottom||void 0!==t.top&&(parseInt(a.getStyle(i,"top"))||0)===t.top||void 0!==t.bottom&&(parseInt(a.getStyle(i,"bottom"))||0)===t.bottom)){!0===t.stop?!0===d.isAttached&&d.detach():!1===d.isAttached&&d.attach();var e=t.position||u.css.position;u.position=e,i.style.position=e,i.style.left=!0===t.stop?u.css.left:d.positionLeft+"px",i.style.width="absolute"!==e?u.css.width:d.width,void 0===t.bottom?i.style.bottom=!0===t.stop?"":"auto":i.style.bottom=t.bottom+"px",void 0===t.top?i.style.top=!0===t.stop?"":"auto":i.style.top=t.top+"px",i.classList?i.classList.remove(r.stickyClass):i.className=i.className.replace(new RegExp("(^|\\b)"+r.stickyClass.split(" ").join("|")+"(\\b|$)","gi")," "),r.onStop&&r.onStop.call(i,r)}}},d={el:o.createElement("div"),offsetLeft:null,positionLeft:null,width:null,isAttached:!1,init:function(){for(var t in u.css)d.el.style[t]=u.css[t];var e=a.getStyle(i);d.offsetLeft=a.offset(i).left-(parseInt(e.marginLeft)||0),d.positionLeft=a.position(i).left,d.width=a.getStyle(i,"width")},attach:function(){l.insertBefore(d.el,i.nextSibling),d.isAttached=!0},detach:function(){d.el=l.removeChild(d.el),d.isAttached=!1}},g=void 0,m=void 0,h=void 0,y=void 0,v=void 0,b=void 0,S=void 0,w=void 0,k=void 0,E=void 0,x=void 0,L=void 0,T=void 0,j=void 0,O=void 0,C=void 0,z=void 0,N=void 0,R=function(){u.css=function(t){var e=a.getCascadedStyle(t),o=a.getStyle(t),n={height:t.offsetHeight+"px",left:e.left,right:e.right,top:e.top,bottom:e.bottom,position:o.position,display:o.display,verticalAlign:o.verticalAlign,boxSizing:o.boxSizing,marginLeft:e.marginLeft,marginRight:e.marginRight,marginTop:e.marginTop,marginBottom:e.marginBottom,paddingLeft:e.paddingLeft,paddingRight:e.paddingRight};return e.float&&(n.float=e.float||"none"),e.cssFloat&&(n.cssFloat=e.cssFloat||"none"),o.MozBoxSizing&&(n.MozBoxSizing=o.MozBoxSizing),n.width="auto"!==e.width?e.width:"border-box"===n.boxSizing||"border-box"===n.MozBoxSizing?t.offsetWidth+"px":o.width,n}(i),d.init(),g=!(!r.stickTo||!("document"===r.stickTo||r.stickTo.nodeType&&9===r.stickTo.nodeType||"object"==typeof r.stickTo&&r.stickTo instanceof("undefined"!=typeof HTMLDocument?HTMLDocument:Document))),m=r.stickTo?g?o:"string"==typeof r.stickTo?o.querySelector(r.stickTo):r.stickTo:l,O=(N=function(){var t=i.offsetHeight+(parseInt(u.css.marginTop)||0)+(parseInt(u.css.marginBottom)||0),e=(O||0)-t;return e>=-1&&e<=1?O:t})(),y=(z=function(){return g?Math.max(o.documentElement.clientHeight,o.body.scrollHeight,o.documentElement.scrollHeight,o.body.offsetHeight,o.documentElement.offsetHeight):m.offsetHeight})(),v=g?0:a.offset(m).top,b=r.stickTo?g?0:a.offset(l).top:v,S=t.innerHeight,C=i.offsetTop-(parseInt(u.css.marginTop)||0),h=r.innerSticker?"string"==typeof r.innerSticker?o.querySelector(r.innerSticker):r.innerSticker:null,w=isNaN(r.top)&&r.top.indexOf("%")>-1?parseFloat(r.top)/100*S:r.top,k=isNaN(r.bottom)&&r.bottom.indexOf("%")>-1?parseFloat(r.bottom)/100*S:r.bottom,E=h?h.offsetTop:r.innerTop?r.innerTop:0,x=isNaN(r.bottomEnd)&&r.bottomEnd.indexOf("%")>-1?parseFloat(r.bottomEnd)/100*S:r.bottomEnd,L=v-w+E+C},H=t.pageYOffset||o.documentElement.scrollTop,A=0,B=void 0,I=function(){O=N(),y=z(),T=v+y-w-x,j=O>S;var e=t.pageYOffset||o.documentElement.scrollTop,n=Math.round(a.offset(i).top),s=n-e,c=void 0;B=e<H?"up":"down",A=e-H,H=e,e>L?T+w+(j?k:0)-(r.followScroll&&j?0:w)<=e+O-E-(O-E>S-(L-E)&&r.followScroll&&(c=O-S-E)>0?c:0)?u.release({position:"absolute",bottom:b+l.offsetHeight-T-w}):j&&r.followScroll?"down"===B?s+O+k<=S?u.stick({bottom:k}):"fixed"===u.position&&u.release({position:"absolute",top:n-w-L-A+E}):s+E<0&&"fixed"===u.position?u.release({position:"absolute",top:n-w-L+E-A}):n>=e+w-E&&u.stick({top:w-E}):u.stick({top:w-E}):u.release({stop:!0})},q=!1,F=!1,M=function(){q&&(a.event.unbind(t,"scroll",I),q=!1)},D=function(){R(),O>=y?M():(I(),q||(a.event.bind(t,"scroll",I),q=!0))},W=function(){i.style.position="",i.style.left="",i.style.top="",i.style.bottom="",i.style.width="",i.classList?i.classList.remove(r.stickyClass):i.className=i.className.replace(new RegExp("(^|\\b)"+r.stickyClass.split(" ").join("|")+"(\\b|$)","gi")," "),u.css={},u.position=null,!0===d.isAttached&&d.detach()},P=function(){W(),p(),f()?M():D()},V=function(){r.onBeforeResize&&r.onBeforeResize.call(i,r),P(),r.onResize&&r.onResize.call(i,r)},Y=r.resizeDebounce?a.debounce(V,r.resizeDebounce):V,$=function(){F&&(a.event.unbind(t,"resize",Y),F=!1),M()},Q=function(){F||(a.event.bind(t,"resize",Y),F=!0),p(),f()?M():D()};this.options=function(t){return t?r.option||null:Object.assign({},r)},this.reinit=P,this.update=function(t){c(t),s=Object.assign({},s,t||{}),P()},this.attach=Q,this.detach=$,this.destroy=function(){$(),W()},c(s),Q(),a.event.bind(t,"load",P)};if(void 0!==t.jQuery){var i=t.jQuery;i.fn.extend({hcSticky:function(t){return this.length?this.each(function(){var e=i.data(this,"hcSticky");e?e.update(t):(e=new n(this,t),i.data(this,"hcSticky",e))}):this}})}return t.hcSticky=t.hcSticky||n,n}),function(t){"use strict";var e=t.hcSticky,o=t.document;"function"!=typeof Object.assign&&Object.defineProperty(Object,"assign",{value:function(t,e){if(null==t)throw new TypeError("Cannot convert undefined or null to object");for(var o=Object(t),n=1;n<arguments.length;n++){var i=arguments[n];if(null!=i)for(var s in i)Object.prototype.hasOwnProperty.call(i,s)&&(o[s]=i[s])}return o},writable:!0,configurable:!0}),Array.prototype.forEach||(Array.prototype.forEach=function(t){var e,o;if(null==this)throw new TypeError("this is null or not defined");var n=Object(this),i=n.length>>>0;if("function"!=typeof t)throw new TypeError(t+" is not a function");for(arguments.length>1&&(e=arguments[1]),o=0;o<i;){var s;o in n&&(s=n[o],t.call(e,s,o,n)),o++}});var n=function(){function e(e){var o=t.event;return o.target=o.target||o.srcElement||e,o}var n=o.documentElement,i=function(){};n.addEventListener?i=function(t,e,o){t.addEventListener(e,o,!1)}:n.attachEvent&&(i=function(t,o,n){t[o+n]=n.handleEvent?function(){var o=e(t);n.handleEvent.call(n,o)}:function(){var o=e(t);n.call(t,o)},t.attachEvent("on"+o,t[o+n])});var s=function(){};return n.removeEventListener?s=function(t,e,o){t.removeEventListener(e,o,!1)}:n.detachEvent&&(s=function(t,e,o){t.detachEvent("on"+e,t[e+o]);try{delete t[e+o]}catch(n){t[e+o]=void 0}}),{bind:i,unbind:s}}(),i=function(e,n){return t.getComputedStyle?n?o.defaultView.getComputedStyle(e,null).getPropertyValue(n):o.defaultView.getComputedStyle(e,null):e.currentStyle?n?e.currentStyle[n.replace(/-\w/g,function(t){return t.toUpperCase().replace("-","")})]:e.currentStyle:void 0},s=function(e){var n=e.getBoundingClientRect(),i=t.pageYOffset||o.documentElement.scrollTop,s=t.pageXOffset||o.documentElement.scrollLeft;return{top:n.top+i,left:n.left+s}};e.Helpers={isEmptyObject:function(t){for(var e in t)return!1;return!0},debounce:function(t,e,o){var n=void 0;return function(){var i=this,s=arguments,r=o&&!n;clearTimeout(n),n=setTimeout(function(){n=null,o||t.apply(i,s)},e),r&&t.apply(i,s)}},hasClass:function(t,e){return t.classList?t.classList.contains(e):new RegExp("(^| )"+e+"( |$)","gi").test(t.className)},offset:s,position:function(t){var e=t.offsetParent,o=s(e),n=s(t),r=i(e),a=i(t);return o.top+=parseInt(r.borderTopWidth)||0,o.left+=parseInt(r.borderLeftWidth)||0,{top:n.top-o.top-(parseInt(a.marginTop)||0),left:n.left-o.left-(parseInt(a.marginLeft)||0)}},getStyle:i,getCascadedStyle:function(e){var n=e.cloneNode(!0);n.style.display="none",Array.prototype.slice.call(n.querySelectorAll('input[type="radio"]')).forEach(function(t){t.removeAttribute("name")}),e.parentNode.insertBefore(n,e.nextSibling);var i=void 0;n.currentStyle?i=n.currentStyle:t.getComputedStyle&&(i=o.defaultView.getComputedStyle(n,null));var s={};for(var r in i)!isNaN(r)||"string"!=typeof i[r]&&"number"!=typeof i[r]||(s[r]=i[r]);if(Object.keys(s).length<3){s={};for(var a in i)isNaN(a)||(s[i[a].replace(/-\w/g,function(t){return t.toUpperCase().replace("-","")})]=i.getPropertyValue(i[a]))}if(s.margin||"auto"!==s.marginLeft?s.margin||s.marginLeft!==s.marginRight||s.marginLeft!==s.marginTop||s.marginLeft!==s.marginBottom||(s.margin=s.marginLeft):s.margin="auto",!s.margin&&"0px"===s.marginLeft&&"0px"===s.marginRight){var l=e.offsetLeft-e.parentNode.offsetLeft,c=l-(parseInt(s.left)||0)-(parseInt(s.right)||0),f=e.parentNode.offsetWidth-e.offsetWidth-l-(parseInt(s.right)||0)+(parseInt(s.left)||0)-c;0!==f&&1!==f||(s.margin="auto")}return n.parentNode.removeChild(n),n=null,s},event:n}}(window);
//selektor
"use strict";var Sticky=new hcSticky("#sidebar",{
stickTo:"#main-wrapper",
followScroll:true,
top:20,
bottom:20,
queries:{1024:{disable:!0}
}});
let cartItems=[];function getCartItemsFromLocalStorage(){let t=localStorage.getItem("cartItems");t&&(cartItems=JSON.parse(t))}function saveCartItemsToLocalStorage(){localStorage.setItem("cartItems",JSON.stringify(cartItems))}function addToCart(t,e){cartItems.push({name:t,price:e}),updateCartIcon(),showCart(),saveCartItemsToLocalStorage(),showSuccessNotification()}function loadCartOnPageLoad(){getCartItemsFromLocalStorage(),updateCartIcon(),showCart()}function clearCartLocalStorage(){localStorage.removeItem("cartItems"),cartItems=[],updateCartIcon(),showCart()}function updateCartIcon(){let t=document.querySelector(".cart-icon");t.setAttribute("data-count",cartItems.length)}function toggleCart(){let t=document.getElementById("cart");t.classList.toggle("show")}function showCart(){let t=document.getElementById("cart-items");t.innerHTML="";let e=0;for(let a=0;a<cartItems.length;a++){let o=cartItems[a],r=document.createElement("div");r.classList.add("product"),r.innerHTML=`
                            <span>${o.name}</span>
                            <span>Harga: IDR ${o.price}</span>
                            <button onclick="removeFromCart(${a})">Hapus</button>
                        `,t.appendChild(r),e+=o.price}let n=document.getElementById("cart-total");n.innerHTML=`<b style="font-size:16px;">Total Harga :</b> IDR ${e}`;

    // Menambahkan logika untuk memasukkan nilai total pembayaran ke formulir
    let totalPembayaranInput = document.getElementById("wa_total_pembayaran");
    totalPembayaranInput.value = e;
}function removeFromCart(t){cartItems.splice(t,1),updateCartIcon(),showCart(),saveCartItemsToLocalStorage()}function showSuccessNotification(){let t=document.createElement("div");t.classList.add("notification"),t.textContent="Berhasil ditambahkan ke keranjang!",document.body.appendChild(t),setTimeout(function(){t.classList.remove("show"),setTimeout(function(){document.body.removeChild(t)},300)},3e3),setTimeout(function(){t.classList.add("show")},10)}window.addEventListener("load",loadCartOnPageLoad);
  // Fungsi untuk menampilkan dan menyembunyikan form WhatsApp
  $(".form-close").click(function() {
      $(".samuelpasaribu-form-wa").fadeOut("fast");
  });

  $(".show-form").click(function() {
      $(".samuelpasaribu-form-wa").fadeIn("slow");
  });

  // Fungsi untuk validasi kolom wajib diisi
  $('.samuelpasaribu-input-field .validate').each(function() {
      title = $(this).attr('name');
      label = $(this).parents('.samuelpasaribu-input-field');
      $('<span class="samuelpasaribu-validasi"><b>' + title + '</b> diperlukan</span>').appendTo(label);
  });

  $(document).on('keyup', '.samuelpasaribu-input-field .validate', function() {
      if ($(this).val() != '') {
          $(this).removeClass('focus');
          $(this).parents('.samuelpasaribu-input-field').find('.samuelpasaribu-validasi').removeClass('show');
      }
  });

  $(document).on('change', '.samuelpasaribu-input-field select', function() {
      $(this).removeClass('focus');
      $(this).parents('.samuelpasaribu-input-field').find('.samuelpasaribu-validasi').removeClass('show');
  });

  // Fungsi untuk mengambil geolokasi pengguna
  function getGeolocation() {
      if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(
              function(position) {
                  var latitude = position.coords.latitude;
                  var longitude = position.coords.longitude;
                  var googleMapsLink = 'https://www.google.com/maps?q=' + latitude + ',' + longitude;
                  $("#wa_alamat").val(googleMapsLink);
                  // Hilangkan pesan validasi jika alamat terisi
                  $("#wa_alamat").removeClass('focus').parents('.samuelpasaribu-input-field').find('.samuelpasaribu-validasi').removeClass('show');
              },
              function(error) {
                  console.log('Gagal mengambil lokasi: ' + error.message);
              }
          );
      } else {
          console.log('Geolokasi tidak didukung di browser Anda.');
      }
  }

  // Fungsi untuk mengirim pesan WhatsApp saat tombol "KIRIM" diklik
  $('#order-form').submit(function(e) {
      e.preventDefault();
      var isValid = true;

      $('.samuelpasaribu-input-field .validate').each(function() {
          if ($(this).val() == '') {
              $(this).addClass('focus');
              $(this).parents('.samuelpasaribu-input-field').find('.samuelpasaribu-validasi').addClass('show');
              isValid = false;
          }
      });

      if ($('#wa_lisensi').val() == 'default') { // Validasi Lisensi
          $('#wa_lisensi').addClass('focus').parents('.samuelpasaribu-input-field').find('.samuelpasaribu-validasi').addClass('show');
          isValid = false;
      }

      if ($('#wa_pembayaran').val() == 'default') { // Validasi Pembayaran
          $('#wa_pembayaran').addClass('focus').parents('.samuelpasaribu-input-field').find('.samuelpasaribu-validasi').addClass('show');
          isValid = false;
      }

      if (input_alamat == '') {
          $("#wa_alamat").addClass('focus').parents('.samuelpasaribu-input-field').find('.samuelpasaribu-validasi').addClass('show');
          isValid = false;
      }

      if (!isValid) {
          return false;
      } else {
          // Pengaturan WhatsApp
          var walink = 'https://web.whatsapp.com/send',
              phone = '6285960306011', // Ganti dengan nomor WhatsApp Anda
              walink2 = 'Halo, saya ingin membeli produk anda dengan keterangan berikut:\n\n';

          // Dukungan Smartphone
          if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
              var walink = 'whatsapp://send';
          }

          // Formulir Input Panggilan
          var input_nama = $("#wa_nama").val(),
              input_email = $("#wa_email").val(),
              input_namaBlog = $("#wa_blog").val(),
              input_urlBlog = $("#wa_url").val(),
              input_alamat = $("#wa_alamat").val(),
              input_lisensi = $("#wa_lisensi :selected").text(),
              input_pembayaran = $("#wa_pembayaran :selected").text(),
              input_namaproduk = $("#nama_produk").text(),
              input_viaUrl = location.href,
              input_totalPembayaran = $("#wa_total_pembayaran").val(); // Menambahkan input total pembayaran

          // URL Final WhatsApp
          var samuelpasaribu_whatsapp = walink + '?phone=' + phone + '&text=' + encodeURIComponent(walink2 +
              '*DATA SAYA*\n' +
              '=======================\n' +
              '*Nama* : ' + input_nama + '\n' +
              '*Email* : ' + input_email + '\n' +
              '*Total Pembayaran* : IDR.' + input_totalPembayaran + '\n' + // Menggunakan total pembayaran yang telah dihitung
              '*URL Blog* : ' + input_urlBlog + '\n' +
              '*Lokasi* : ' + input_alamat + '\n' +
              '*Metode Pembayaran* : ' + input_pembayaran + '\n' +
              '=======================\n\n' +
              '*DAFTAR BELANJAAN*\n' +
              '=======================\n' +
              '*Nama Produk* : ' + input_namaproduk + '\n' +
              '*Jenis Lisensi* : ' + input_lisensi + '\n' +
              '*Link Produk* : ' + input_viaUrl + '\n' +
              '=======================');

          // Buka Jendela WhatsApp
          window.open(samuelpasaribu_whatsapp, '_blank');
          window.location.href = input_viaUrl;
          return false;
      }
  });

  // Fungsi untuk mereset form
  $('.reset_form').click(function() {
      $('#order-form')[0].reset();
      $('#wa_lisensi, #wa_pembayaran').val('default');
      $('.samuelpasaribu-input-field .validate').removeClass('focus');
      $('.samuelpasaribu-input-field .samuelpasaribu-validasi').removeClass('show');
  });
  const targetDomain = 'haxorai.com';

function createAlertBox(message) {
  const alertBox = document.createElement('div');
  alertBox.setAttribute('id', 'alertBox');
  alertBox.style.position = 'fixed';
  alertBox.style.top = '50px';
  alertBox.style.left = '50%';
  alertBox.style.transform = 'translateX(-50%)';
  alertBox.style.backgroundColor = '#f2f2f2';
  alertBox.style.border = '1px solid #ddd';
  alertBox.style.borderRadius = '5px';
  alertBox.style.padding = '20px';
  alertBox.style.boxShadow = '0 2px 4px rgba(0,0,0,0.2)';
  alertBox.style.zIndex = '9999';
  alertBox.innerHTML = `<strong>PERINGATAN!</strong> ${message}`;
  document.body.appendChild(alertBox);

  setTimeout(() => {
    document.body.removeChild(alertBox);
    window.location.href = 'https://www.haxorai.com';
  }, 10000);
}

const currentDomain = window.location.hostname;

if (currentDomain !== targetDomain) {
  createAlertBox('Sumber Daya Ini Diamankan Oleh Ahli Keamanan. Dilarang Mengakses Tanpa Izin.');
}';
function runDecryptedCode(encryptedCode) {
    const decodedCode = atob(encryptedCode);
    eval(decodedCode);
}
runDecryptedCode(encryptedCode);
