const encryptedCode = 'function footerToggle(element) {
    var footerCatLinks = element.nextElementSibling;
    var footerToggle = element.querySelector('.footer-toggle');

    if (footerCatLinks && footerToggle) {
        footerCatLinks.classList.toggle('active');
        footerToggle.classList.toggle('active');
    } else {
        console.error("Footer elements not found.");
    }
}
$(document).ready(function() {
    $(".mobile-bottom-nav__item").click(function() {
        $(".mobile-bottom-nav__item").removeClass("mobile-bottom-nav__item--active");
        $(this).addClass("mobile-bottom-nav__item--active");
    });

    $(".icons").click(function() {
        $("#nav2").animate({
            height: "toggle",
            opacity: "toggle"
        }, 100, "linear");
        $("#lain").animate({
            height: "toggle",
            opacity: "toggle"
        }, 200, "linear");
        $("#tutup").toggleClass("rotate");
    });

    $("#lain").click(function() {
        $("#nav2").animate({
            height: "toggle",
            opacity: "toggle"
        }, 100, "linear");
        $("#lain").animate({
            height: "toggle",
            opacity: "toggle"
        }, 200, "linear");
        $("#tutup").toggleClass("rotate");
    });
});
"use strict";!function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.ResizeSensor=t()}("undefined"!=typeof window?window:this,function(){if("undefined"==typeof window)return null;var e="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")(),t=e.requestAnimationFrame||e.mozRequestAnimationFrame||e.webkitRequestAnimationFrame||function(t){return e.setTimeout(t,20)},n=e.cancelAnimationFrame||e.mozCancelAnimationFrame||e.webkitCancelAnimationFrame||function(t){e.clearTimeout(t)};function i(e,t){var n=Object.prototype.toString.call(e),i="[object Array]"===n||"[object NodeList]"===n||"[object HTMLCollection]"===n||"[object Object]"===n||"undefined"!=typeof jQuery&&e instanceof jQuery||"undefined"!=typeof Elements&&e instanceof Elements,o=0,r=e.length;if(i)for(;o<r;o++)t(e[o]);else t(e)}function o(e){if(!e.getBoundingClientRect)return{width:e.offsetWidth,height:e.offsetHeight};var t=e.getBoundingClientRect();return{width:Math.round(t.width),height:Math.round(t.height)}}function r(e,t){Object.keys(t).forEach(function(n){e.style[n]=t[n]})}var s=function(e,d){var a=0;function c(){var e,t,n=[];this.add=function(e){n.push(e)},this.call=function(i){for(e=0,t=n.length;e<t;e++)n[e].call(this,i)},this.remove=function(i){var o=[];for(e=0,t=n.length;e<t;e++)n[e]!==i&&o.push(n[e]);n=o},this.length=function(){return n.length}}function f(e,n){if(e)if(e.resizedAttached)e.resizedAttached.add(n);else{e.resizedAttached=new c,e.resizedAttached.add(n),e.resizeSensor=document.createElement("div"),e.resizeSensor.dir="ltr",e.resizeSensor.className="resize-sensor";var i={pointerEvents:"none",position:"absolute",left:"0px",top:"0px",right:"0px",bottom:"0px",overflow:"hidden",zIndex:"-1",visibility:"hidden",maxWidth:"100%"},s={position:"absolute",left:"0px",top:"0px",transition:"0s"};r(e.resizeSensor,i);var d=document.createElement("div");d.className="resize-sensor-expand",r(d,i);var f=document.createElement("div");r(f,s),d.appendChild(f);var h=document.createElement("div");h.className="resize-sensor-shrink",r(h,i);var l=document.createElement("div");r(l,s),r(l,{width:"200%",height:"200%"}),h.appendChild(l),e.resizeSensor.appendChild(d),e.resizeSensor.appendChild(h),e.appendChild(e.resizeSensor);var u=window.getComputedStyle(e),p=u?u.getPropertyValue("position"):null;"absolute"!==p&&"relative"!==p&&"fixed"!==p&&"sticky"!==p&&(e.style.position="relative");var m=!1,v=0,z=o(e),w=0,g=0,y=!0;a=0;var S=function(){if(y){if(0===e.offsetWidth&&0===e.offsetHeight)return void(a||(a=t(function(){a=0,S()})));y=!1}var n,i;n=e.offsetWidth,i=e.offsetHeight,f.style.width=n+10+"px",f.style.height=i+10+"px",d.scrollLeft=n+10,d.scrollTop=i+10,h.scrollLeft=n+10,h.scrollTop=i+10};e.resizeSensor.resetSensor=S;var b=function(){v=0,m&&(w=z.width,g=z.height,e.resizedAttached&&e.resizedAttached.call(z))},A=function(){z=o(e),(m=z.width!==w||z.height!==g)&&!v&&(v=t(b)),S()},x=function(e,t,n){e.attachEvent?e.attachEvent("on"+t,n):e.addEventListener(t,n)};x(d,"scroll",A),x(h,"scroll",A),a=t(function(){a=0,S()})}}i(e,function(e){f(e,d)}),this.detach=function(t){a&&(n(a),a=0),s.detach(e,t)},this.reset=function(){e.resizeSensor.resetSensor&&e.resizeSensor.resetSensor()}};if(s.reset=function(e){i(e,function(t){e.resizeSensor.resetSensor&&t.resizeSensor.resetSensor()})},s.detach=function(e,t){i(e,function(e){e&&(e.resizedAttached&&"function"==typeof t&&(e.resizedAttached.remove(t),e.resizedAttached.length())||e.resizeSensor&&(e.contains(e.resizeSensor)&&e.removeChild(e.resizeSensor),delete e.resizeSensor,delete e.resizedAttached))})},"undefined"!=typeof MutationObserver){var d=new MutationObserver(function(e){for(var t in e)if(e.hasOwnProperty(t))for(var n=e[t].addedNodes,i=0;i<n.length;i++)n[i].resizeSensor&&s.reset(n[i])});document.addEventListener("DOMContentLoaded",function(e){d.observe(document.body,{childList:!0,subtree:!0})})}return s});function scrollFunction(){document.body.scrollTop>100||document.documentElement.scrollTop>500?document.getElementById("buttombutton").style.bottom="0px":document.getElementById("buttombutton").style.bottom="-45px"}function topFunction(){document.body.scrollTop=0,document.documentElement.scrollTop=0}window.onscroll=function(){scrollFunction()};
document.getElementById("otoyear").innerHTML = new Date().getFullYear();

var classes = ["show-list", "menu-active", "toggle", " ", "split", "className", "indexOf", "splice", "push", "join", "body", "no-overflow"];
var thumboxSelector = ".thumbox";
var labelHTML = "<span class='spanlabel'>Jangan Dihapus dong</span>";

function toggleClass(element, className) {
  if (element.classList) {
    element.classList.toggle(className);
  } else {
    var classes = element.className.split(' ');
    var existingIndex = classes.indexOf(className);

    if (existingIndex >= 0) {
      classes.splice(existingIndex, 1);
    } else {
      classes.push(className);
    }

    element.className = classes.join(' ');
  }
}

function menuButton() {
  var showListElement = document.getElementById("show-list");
  toggleClass(showListElement, "menu-active");

  var bodyElement = document.body;
  toggleClass(bodyElement, "no-overflow");
}

var crY;
if (crY = document.querySelectorAll(thumboxSelector)) {
  crY.forEach(function (element) {
    element.classList.add("b-lazy");
  });
} else {
  var postImages = document.querySelectorAll(".post-image"); // Ganti dengan selektor yang sesuai dengan struktur HTML
  for (var i = 0; i < postImages.length; i++) {
    var postImage = postImages[i];
    var imageUrl = postImage.getAttribute("data-image-url"); // Ganti dengan atribut yang sesuai
    postImage.innerHTML = "<img src='" + imageUrl + "' alt='Post Image'>"; // Menambahkan elemen gambar
    postImage.classList.add("b-lazy"); // Menambah kelas b-lazy
  }
}
!function(t,e){"use strict";if("object"==typeof module&&"object"==typeof module.exports){if(!t.document)throw new Error("HC-Sticky requires a browser to run.");module.exports=e(t)}else"function"==typeof define&&define.amd?define("hcSticky",[],e(t)):e(t)}("undefined"!=typeof window?window:this,function(t){"use strict";var e={top:0,bottom:0,bottomEnd:0,innerTop:0,innerSticker:null,stickyClass:"sticky",stickTo:null,followScroll:!0,queries:null,queryFlow:"down",onStart:null,onStop:null,onBeforeResize:null,onResize:null,resizeDebounce:100,disable:!1},o=t.document,n=function(i,s){if("string"==typeof i&&(i=o.querySelector(i)),!i)return!1;var r={},a=n.Helpers,l=i.parentNode;"static"===a.getStyle(l,"position")&&(l.style.position="relative");var c=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};a.isEmptyObject(t)&&!a.isEmptyObject(r)||(r=Object.assign({},e,r,t))},f=function(){return r.disable},p=function(){if(r.queries){var o=t.innerWidth,n=r.queryFlow,i=r.queries;if(function(t){r=Object.assign({},e,t||{})}(s),"up"===n)for(var l in i)o>=l&&!a.isEmptyObject(i[l])&&c(i[l]);else{var f=[];for(var p in r.queries){var u={};u[p]=i[p],f.push(u)}for(var d=f.length-1;d>=0;d--){var g=f[d],m=Object.keys(g)[0];o<=m&&!a.isEmptyObject(g[m])&&c(g[m])}}}},u={css:{},position:null,stick:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};a.hasClass(i,r.stickyClass)||(!1===d.isAttached&&d.attach(),u.position="fixed",i.style.position="fixed",i.style.left=d.offsetLeft+"px",i.style.width=d.width,void 0===t.bottom?i.style.bottom="auto":i.style.bottom=t.bottom+"px",void 0===t.top?i.style.top="auto":i.style.top=t.top+"px",i.classList?i.classList.add(r.stickyClass):i.className+=" "+r.stickyClass,r.onStart&&r.onStart.call(i,r))},release:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(t.stop=t.stop||!1,!0===t.stop||"fixed"===u.position||null===u.position||!(void 0===t.top&&void 0===t.bottom||void 0!==t.top&&(parseInt(a.getStyle(i,"top"))||0)===t.top||void 0!==t.bottom&&(parseInt(a.getStyle(i,"bottom"))||0)===t.bottom)){!0===t.stop?!0===d.isAttached&&d.detach():!1===d.isAttached&&d.attach();var e=t.position||u.css.position;u.position=e,i.style.position=e,i.style.left=!0===t.stop?u.css.left:d.positionLeft+"px",i.style.width="absolute"!==e?u.css.width:d.width,void 0===t.bottom?i.style.bottom=!0===t.stop?"":"auto":i.style.bottom=t.bottom+"px",void 0===t.top?i.style.top=!0===t.stop?"":"auto":i.style.top=t.top+"px",i.classList?i.classList.remove(r.stickyClass):i.className=i.className.replace(new RegExp("(^|\\b)"+r.stickyClass.split(" ").join("|")+"(\\b|$)","gi")," "),r.onStop&&r.onStop.call(i,r)}}},d={el:o.createElement("div"),offsetLeft:null,positionLeft:null,width:null,isAttached:!1,init:function(){for(var t in u.css)d.el.style[t]=u.css[t];var e=a.getStyle(i);d.offsetLeft=a.offset(i).left-(parseInt(e.marginLeft)||0),d.positionLeft=a.position(i).left,d.width=a.getStyle(i,"width")},attach:function(){l.insertBefore(d.el,i.nextSibling),d.isAttached=!0},detach:function(){d.el=l.removeChild(d.el),d.isAttached=!1}},g=void 0,m=void 0,h=void 0,y=void 0,v=void 0,b=void 0,S=void 0,w=void 0,k=void 0,E=void 0,x=void 0,L=void 0,T=void 0,j=void 0,O=void 0,C=void 0,z=void 0,N=void 0,R=function(){u.css=function(t){var e=a.getCascadedStyle(t),o=a.getStyle(t),n={height:t.offsetHeight+"px",left:e.left,right:e.right,top:e.top,bottom:e.bottom,position:o.position,display:o.display,verticalAlign:o.verticalAlign,boxSizing:o.boxSizing,marginLeft:e.marginLeft,marginRight:e.marginRight,marginTop:e.marginTop,marginBottom:e.marginBottom,paddingLeft:e.paddingLeft,paddingRight:e.paddingRight};return e.float&&(n.float=e.float||"none"),e.cssFloat&&(n.cssFloat=e.cssFloat||"none"),o.MozBoxSizing&&(n.MozBoxSizing=o.MozBoxSizing),n.width="auto"!==e.width?e.width:"border-box"===n.boxSizing||"border-box"===n.MozBoxSizing?t.offsetWidth+"px":o.width,n}(i),d.init(),g=!(!r.stickTo||!("document"===r.stickTo||r.stickTo.nodeType&&9===r.stickTo.nodeType||"object"==typeof r.stickTo&&r.stickTo instanceof("undefined"!=typeof HTMLDocument?HTMLDocument:Document))),m=r.stickTo?g?o:"string"==typeof r.stickTo?o.querySelector(r.stickTo):r.stickTo:l,O=(N=function(){var t=i.offsetHeight+(parseInt(u.css.marginTop)||0)+(parseInt(u.css.marginBottom)||0),e=(O||0)-t;return e>=-1&&e<=1?O:t})(),y=(z=function(){return g?Math.max(o.documentElement.clientHeight,o.body.scrollHeight,o.documentElement.scrollHeight,o.body.offsetHeight,o.documentElement.offsetHeight):m.offsetHeight})(),v=g?0:a.offset(m).top,b=r.stickTo?g?0:a.offset(l).top:v,S=t.innerHeight,C=i.offsetTop-(parseInt(u.css.marginTop)||0),h=r.innerSticker?"string"==typeof r.innerSticker?o.querySelector(r.innerSticker):r.innerSticker:null,w=isNaN(r.top)&&r.top.indexOf("%")>-1?parseFloat(r.top)/100*S:r.top,k=isNaN(r.bottom)&&r.bottom.indexOf("%")>-1?parseFloat(r.bottom)/100*S:r.bottom,E=h?h.offsetTop:r.innerTop?r.innerTop:0,x=isNaN(r.bottomEnd)&&r.bottomEnd.indexOf("%")>-1?parseFloat(r.bottomEnd)/100*S:r.bottomEnd,L=v-w+E+C},H=t.pageYOffset||o.documentElement.scrollTop,A=0,B=void 0,I=function(){O=N(),y=z(),T=v+y-w-x,j=O>S;var e=t.pageYOffset||o.documentElement.scrollTop,n=Math.round(a.offset(i).top),s=n-e,c=void 0;B=e<H?"up":"down",A=e-H,H=e,e>L?T+w+(j?k:0)-(r.followScroll&&j?0:w)<=e+O-E-(O-E>S-(L-E)&&r.followScroll&&(c=O-S-E)>0?c:0)?u.release({position:"absolute",bottom:b+l.offsetHeight-T-w}):j&&r.followScroll?"down"===B?s+O+k<=S?u.stick({bottom:k}):"fixed"===u.position&&u.release({position:"absolute",top:n-w-L-A+E}):s+E<0&&"fixed"===u.position?u.release({position:"absolute",top:n-w-L+E-A}):n>=e+w-E&&u.stick({top:w-E}):u.stick({top:w-E}):u.release({stop:!0})},q=!1,F=!1,M=function(){q&&(a.event.unbind(t,"scroll",I),q=!1)},D=function(){R(),O>=y?M():(I(),q||(a.event.bind(t,"scroll",I),q=!0))},W=function(){i.style.position="",i.style.left="",i.style.top="",i.style.bottom="",i.style.width="",i.classList?i.classList.remove(r.stickyClass):i.className=i.className.replace(new RegExp("(^|\\b)"+r.stickyClass.split(" ").join("|")+"(\\b|$)","gi")," "),u.css={},u.position=null,!0===d.isAttached&&d.detach()},P=function(){W(),p(),f()?M():D()},V=function(){r.onBeforeResize&&r.onBeforeResize.call(i,r),P(),r.onResize&&r.onResize.call(i,r)},Y=r.resizeDebounce?a.debounce(V,r.resizeDebounce):V,$=function(){F&&(a.event.unbind(t,"resize",Y),F=!1),M()},Q=function(){F||(a.event.bind(t,"resize",Y),F=!0),p(),f()?M():D()};this.options=function(t){return t?r.option||null:Object.assign({},r)},this.reinit=P,this.update=function(t){c(t),s=Object.assign({},s,t||{}),P()},this.attach=Q,this.detach=$,this.destroy=function(){$(),W()},c(s),Q(),a.event.bind(t,"load",P)};if(void 0!==t.jQuery){var i=t.jQuery;i.fn.extend({hcSticky:function(t){return this.length?this.each(function(){var e=i.data(this,"hcSticky");e?e.update(t):(e=new n(this,t),i.data(this,"hcSticky",e))}):this}})}return t.hcSticky=t.hcSticky||n,n}),function(t){"use strict";var e=t.hcSticky,o=t.document;"function"!=typeof Object.assign&&Object.defineProperty(Object,"assign",{value:function(t,e){if(null==t)throw new TypeError("Cannot convert undefined or null to object");for(var o=Object(t),n=1;n<arguments.length;n++){var i=arguments[n];if(null!=i)for(var s in i)Object.prototype.hasOwnProperty.call(i,s)&&(o[s]=i[s])}return o},writable:!0,configurable:!0}),Array.prototype.forEach||(Array.prototype.forEach=function(t){var e,o;if(null==this)throw new TypeError("this is null or not defined");var n=Object(this),i=n.length>>>0;if("function"!=typeof t)throw new TypeError(t+" is not a function");for(arguments.length>1&&(e=arguments[1]),o=0;o<i;){var s;o in n&&(s=n[o],t.call(e,s,o,n)),o++}});var n=function(){function e(e){var o=t.event;return o.target=o.target||o.srcElement||e,o}var n=o.documentElement,i=function(){};n.addEventListener?i=function(t,e,o){t.addEventListener(e,o,!1)}:n.attachEvent&&(i=function(t,o,n){t[o+n]=n.handleEvent?function(){var o=e(t);n.handleEvent.call(n,o)}:function(){var o=e(t);n.call(t,o)},t.attachEvent("on"+o,t[o+n])});var s=function(){};return n.removeEventListener?s=function(t,e,o){t.removeEventListener(e,o,!1)}:n.detachEvent&&(s=function(t,e,o){t.detachEvent("on"+e,t[e+o]);try{delete t[e+o]}catch(n){t[e+o]=void 0}}),{bind:i,unbind:s}}(),i=function(e,n){return t.getComputedStyle?n?o.defaultView.getComputedStyle(e,null).getPropertyValue(n):o.defaultView.getComputedStyle(e,null):e.currentStyle?n?e.currentStyle[n.replace(/-\w/g,function(t){return t.toUpperCase().replace("-","")})]:e.currentStyle:void 0},s=function(e){var n=e.getBoundingClientRect(),i=t.pageYOffset||o.documentElement.scrollTop,s=t.pageXOffset||o.documentElement.scrollLeft;return{top:n.top+i,left:n.left+s}};e.Helpers={isEmptyObject:function(t){for(var e in t)return!1;return!0},debounce:function(t,e,o){var n=void 0;return function(){var i=this,s=arguments,r=o&&!n;clearTimeout(n),n=setTimeout(function(){n=null,o||t.apply(i,s)},e),r&&t.apply(i,s)}},hasClass:function(t,e){return t.classList?t.classList.contains(e):new RegExp("(^| )"+e+"( |$)","gi").test(t.className)},offset:s,position:function(t){var e=t.offsetParent,o=s(e),n=s(t),r=i(e),a=i(t);return o.top+=parseInt(r.borderTopWidth)||0,o.left+=parseInt(r.borderLeftWidth)||0,{top:n.top-o.top-(parseInt(a.marginTop)||0),left:n.left-o.left-(parseInt(a.marginLeft)||0)}},getStyle:i,getCascadedStyle:function(e){var n=e.cloneNode(!0);n.style.display="none",Array.prototype.slice.call(n.querySelectorAll('input[type="radio"]')).forEach(function(t){t.removeAttribute("name")}),e.parentNode.insertBefore(n,e.nextSibling);var i=void 0;n.currentStyle?i=n.currentStyle:t.getComputedStyle&&(i=o.defaultView.getComputedStyle(n,null));var s={};for(var r in i)!isNaN(r)||"string"!=typeof i[r]&&"number"!=typeof i[r]||(s[r]=i[r]);if(Object.keys(s).length<3){s={};for(var a in i)isNaN(a)||(s[i[a].replace(/-\w/g,function(t){return t.toUpperCase().replace("-","")})]=i.getPropertyValue(i[a]))}if(s.margin||"auto"!==s.marginLeft?s.margin||s.marginLeft!==s.marginRight||s.marginLeft!==s.marginTop||s.marginLeft!==s.marginBottom||(s.margin=s.marginLeft):s.margin="auto",!s.margin&&"0px"===s.marginLeft&&"0px"===s.marginRight){var l=e.offsetLeft-e.parentNode.offsetLeft,c=l-(parseInt(s.left)||0)-(parseInt(s.right)||0),f=e.parentNode.offsetWidth-e.offsetWidth-l-(parseInt(s.right)||0)+(parseInt(s.left)||0)-c;0!==f&&1!==f||(s.margin="auto")}return n.parentNode.removeChild(n),n=null,s},event:n}}(window);
//selektor
"use strict";var Sticky=new hcSticky("#sidebar",{
stickTo:"#main-wrapper",
followScroll:true,
top:20,
bottom:20,
queries:{1024:{disable:!0}
}});
var elem = document.documentElement; function openFullscreen() { if (elem.requestFullscreen) { elem.requestFullscreen(); } else if (elem.mozRequestFullScreen) { /* Firefox */elem.mozRequestFullScreen(); } else if (elem.webkitRequestFullscreen) { /* Chrome, Safari dan Opera */ elem.webkitRequestFullscreen(); } else if (elem.msRequestFullscreen) { /* IE Atau Edge */ elem.msRequestFullscreen(); } document.getElementById("openfull").style.display = "none"; document.getElementById("exitfull").style.display = "block"; }function closeFullscreen() { if (document.exitFullscreen) { document.exitFullscreen(); } else if (document.mozCancelFullScreen) { document.mozCancelFullScreen(); } else if (document.webkitExitFullscreen) { document.webkitExitFullscreen(); } else if (document.msExitFullscreen) { document.msExitFullscreen(); } document.getElementById("openfull").style.display = "block"; document.getElementById("exitfull").style.display = "none"; }
let cartItems=[];function getCartItemsFromLocalStorage(){let t=localStorage.getItem("cartItems");t&&(cartItems=JSON.parse(t))}function saveCartItemsToLocalStorage(){localStorage.setItem("cartItems",JSON.stringify(cartItems))}function addToCart(t,e){cartItems.push({name:t,price:e}),updateCartIcon(),showCart(),saveCartItemsToLocalStorage(),showSuccessNotification()}function loadCartOnPageLoad(){getCartItemsFromLocalStorage(),updateCartIcon(),showCart()}function clearCartLocalStorage(){localStorage.removeItem("cartItems"),cartItems=[],updateCartIcon(),showCart()}function updateCartIcon(){let t=document.querySelector(".cart-icon");t.setAttribute("data-count",cartItems.length)}function toggleCart(){let t=document.getElementById("cart");t.classList.toggle("show")}function showCart(){let t=document.getElementById("cart-items");t.innerHTML="";let e=0;for(let a=0;a<cartItems.length;a++){let o=cartItems[a],r=document.createElement("div");r.classList.add("product"),r.innerHTML=`
                            <span>${o.name}</span>
                            <span>Harga: IDR ${o.price}</span>
                            <button onclick="removeFromCart(${a})">Hapus</button>
                        `,t.appendChild(r),e+=o.price}let n=document.getElementById("cart-total");n.innerHTML=`<b style="font-size:16px;">Total Harga&nbsp;:</b>&nbsp;IDR ${e}`;

    // Menambahkan logika untuk memasukkan nilai total pembayaran ke formulir
    let totalPembayaranInput = document.getElementById("wa_total_pembayaran");
    totalPembayaranInput.value = e;
}function removeFromCart(t){cartItems.splice(t,1),updateCartIcon(),showCart(),saveCartItemsToLocalStorage()}function showSuccessNotification(){let t=document.createElement("div");t.classList.add("notification"),t.textContent="Berhasil ditambahkan ke keranjang!",document.body.appendChild(t),setTimeout(function(){t.classList.remove("show"),setTimeout(function(){document.body.removeChild(t)},300)},3e3),setTimeout(function(){t.classList.add("show")},10)}window.addEventListener("load",loadCartOnPageLoad);
var Zuck=function(e){var t={};function n(a){if(t[a])return t[a].exports;var i=t[a]={i:a,l:!1,exports:{}};return e[a].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=e,n.c=t,n.d=function(e,t,a){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t||4&t&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(n.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(a,i,(function(t){return e[t]}).bind(null,i));return a},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/",n(n.s=0)}([function(e,t,n){var a,i,o,r,c,s,l,d,u;e.exports=(a=window||{},i=function(e){return document.querySelectorAll(e)[0]},o=function(e,t){return e&&e[t]||""},r=function(e,t){if(e)for(var n=e.length,a=0;a<n;a++)t(a,e[a])},c=function(e,t,n){r([t.toLowerCase(),"webkit".concat(t),"MS".concat(t),"o".concat(t)],function(t,a){e[a]=n})},s=function(e,t,n){r([n.toLowerCase(),"webkit".concat(n),"MS".concat(n),"o".concat(n)],function(n,a){e.addEventListener(a,t,!1)})},l=function(e,t){s(e,t,"AnimationEnd")},d=function(e,t){e.firstChild?e.insertBefore(t,e.firstChild):e.appendChild(t)},(u=function(e,t){var n,u,m,v,f,p,g=this,y=function(e,n){var a=function(e){return void 0!==e};return n?a(t[e])&&a(t[e][n])?t[e][n]:_[e][n]:a(t[e])?t[e]:_[e]},h=function(e,t){var n="RequestFullScreen";try{t?(document.fullscreenElement||document.webkitFullscreenElement||document.mozFullScreenElement||document.msFullscreenElement)&&(document.exitFullscreen?document.exitFullscreen().catch(function(){}):(document.mozCancelFullScreen||document.mozCancelFullScreen)&&document.mozCancelFullScreen().catch(function(){})):e.requestFullScreen?e.requestFullScreen():e["ms".concat(n)]?e["ms".concat(n)]():e["moz".concat(n)]?e["moz".concat(n)]():e["webkit".concat(n)]&&e["webkit".concat(n)]()}catch(a){console.warn("[Zuck.js] Can't access fullscreen")}},$=function(e,t,n,a){var o=Math.abs(t)/i("#zuck-modal").offsetWidth*90*(t>0?1:-1);if(y("cubeEffect")&&(c(i("#zuck-modal-content").style,"Transform",0===o?"scale(0.95)":"scale(0.930,0.930)"),o<-90||o>90))return!1;var r=y("cubeEffect")?"rotateY(".concat(o,"deg)"):"translate3d(".concat(t,"px, 0, 0)");e&&(c(e.style,"TransitionTimingFunction",a),c(e.style,"TransitionDuration","".concat(n,"ms")),c(e.style,"Transform",r))},k=function(e,t,n,a){var i=0,o=0;if(e){if(e.offsetParent)do if(i+=e.offsetLeft,o+=e.offsetTop,e===a)break;while(e=e.offsetParent);t&&(o-=t),n&&(i-=n)}return[i,o]};"string"==typeof e&&(e=document.getElementById(e)),e.id||e.setAttribute("id","stories-"+Math.random().toString(36).substr(2,9));var b=function(e){e=1e3*Number(e);var t=new Date(e),n=t.getTime(),a=((new Date).getTime()-n)/1e3,i=y("language","time"),o=[[60," ".concat(i.seconds),1],[120,"1 ".concat(i.minute),""],[3600," ".concat(i.minutes),60],[7200,"1 ".concat(i.hour),""],[86400," ".concat(i.hours),3600],[172800," ".concat(i.yesterday),""],[604800," ".concat(i.days),86400]],c=1;a<0&&(a=Math.abs(a),c=2);var s=!1;if(r(o,function(e,t){a<t[0]&&!s&&("string"==typeof t[2]?s=t[c]:null!==t&&(s=Math.floor(a/t[2])+t[1]))}),s)return s;var l=t.getDate(),d=t.getMonth(),u=t.getFullYear();return"".concat(l,"/").concat(d+1,"/").concat(u)},w=e.id,_={rtl:!1,skin:"snapgram",avatars:!0,stories:[],backButton:!0,backNative:!1,paginationArrows:!1,previousTap:!0,autoFullScreen:!1,openEffect:!0,cubeEffect:!1,list:!1,localStorage:!0,callbacks:{onOpen:function(e,t){t()},onView:function(e){},onEnd:function(e,t){t()},onClose:function(e,t){t()},onNextItem:function(e,t,n){n()},onNavigateItem:function(e,t,n){n()}},template:{timelineItem:function(e){return'\n            <div class="story '.concat(!0===o(e,"seen")?"seen":"",'">\n              <a class="item-link" href="javascript:;">\n                <span class="item-preview">\n                  <img aria-label="stories" alt="').concat(o(e,"name"),'" lazy="eager" class="image b-lazy b-loaded" src="').concat(y("avatars")||!o(e,"currentPreview")?o(e,"photo"):o(e,"currentPreview"),'" width="61" height="61" />\n                </span>\n                <span class="info" itemProp="author" itemScope itemType="http://schema.org/Person">\n                  <strong class="name" itemProp="name">').concat(o(e,"name"),'</strong>\n                  \n                </span>\n              </a>\n              \n              <ul class="items"></ul>\n            </div>')},timelineStoryItem:function(e){var t=["id","seen","src","link","linkText","time","type","length","preview"],n='\n            href="'.concat(o(e,"src"),'"\n            data-link="').concat(o(e,"link"),'"\n            data-linkText="').concat(o(e,"linkText"),'"\n            data-time="').concat(o(e,"time"),'"\n            data-type="').concat(o(e,"type"),'"\n            data-length="').concat(o(e,"length"),'"\n          ');for(var a in e)-1===t.indexOf(a)&&(n+=" data-".concat(a,'="').concat(e[a],'"'));return"<a ".concat(n,'>\n                    <img loading="auto" src="').concat(o(e,"preview"),'" />\n                  </a>')},viewerItem:function(e,t){return'<div class="story-viewer">\n                    <div class="head">\n                      <div class="left">\n                        '.concat((y("backButton"),""),'\n\n                        <span class="item-preview">\n                          <img alt="').concat(o(e,"name"),'" lazy="eager" class="profilePhoto" src="').concat(o(e,"photo"),'" />\n                        </span>\n\n                        <div class="info">\n                          <strong class="name">').concat(o(e,"name"),'</strong>\n                          \n                        </div>\n                      </div>\n\n                      <div class="right">\n                        \n                        <span class="loading"></span>\n                        <a class="close" tabIndex="2">&#10005;</a>\n                      </div>\n                    </div>\n\n                    <div class="slides-pointers">\n                      <div class="wrap"></div>\n                    </div>\n\n                    ').concat(y("paginationArrows")?'<div class="slides-pagination">\n                          <span class="previous">&lsaquo;</span>\n                          <span class="next">&rsaquo;</span>\n                        </div>':"","\n                  </div>")},viewerItemPointer:function(e,t,n){return'<span \n                    class="'.concat(t===e?"active":""," ").concat(!0===o(n,"seen")?"seen":"",'"\n                    data-index="').concat(e,'" data-item-id="').concat(o(n,"id"),'">\n                      <b style="animation-duration:').concat(""===o(n,"length")?"3":o(n,"length"),'s"></b>\n                  </span>')},viewerItemBody:function(e,t,n){return'<div \n                    class="item '.concat(!0===o(n,"seen")?"seen":""," ").concat(t===e?"active":"",'"\n                    data-time="').concat(o(n,"time"),'" data-type="').concat(o(n,"type"),'" data-index="').concat(e,'" data-item-id="').concat(o(n,"id"),'">\n                    ').concat("video"===o(n,"type")?'<video class="media" muted webkit-playsinline playsinline preload="auto" src="'.concat(o(n,"src"),'" ').concat(o(n,"type"),'></video>\n                        <b class="tip muted">').concat(y("language","unmute"),"</b>"):'<img loading="auto" class="media" src="'.concat(o(n,"src"),'" ').concat(o(n,"type")," />\n                    "),"\n\n                    ").concat(o(n,"link")?'<a class="tip link" href="'.concat(o(n,"link"),'" rel="noopener" target="_36">\n                            ').concat(o(n,"linkText")&&""!==o(n,"linkText")?o(n,"linkText"):y("language","visitLink"),"\n                          </a>"):"","\n                  </div>")}},language:{unmute:"Touch to unmute",keyboardTip:"Press space to see next",visitLink:"Visit link",time:{ago:"ago",hour:"hour ago",hours:"hours ago",minute:"minute ago",minutes:"minutes ago",fromnow:"from now",seconds:"seconds ago",yesterday:"yesterday",tomorrow:"tomorrow",days:"days ago"}}},A=((m=i("#zuck-modal"))||g.hasModal||(g.hasModal=!0,(m=document.createElement("div")).id="zuck-modal",y("cubeEffect")&&(m.className="with-cube"),m.innerHTML='<div id="zuck-modal-content"></div>',m.style.display="none",m.setAttribute("tabIndex","1"),m.onkeyup=function(e){var t=e.keyCode;27===t?A.close():13!==t&&32!==t||A.next()},y("openEffect")&&m.classList.add("with-effects"),y("rtl")&&m.classList.add("rtl"),u=function(){m.classList.contains("closed")&&(v.innerHTML="",m.style.display="none",m.classList.remove("closed"),m.classList.remove("animated"))},(n=m).transitionEndEvent||(n.transitionEndEvent=!0,s(n,u,"TransitionEnd")),document.body.appendChild(m)),v=i("#zuck-modal-content"),f=function(e){var t=i("#zuck-modal"),n="",a="",o=0,r=i("#zuck-modal-slider-".concat(w)),c={previous:i("#zuck-modal .story-viewer.previous"),next:i("#zuck-modal .story-viewer.next"),viewing:i("#zuck-modal .story-viewer.viewing")};if((!c.previous&&!e||!c.next&&e)&&!y("rtl"))return!1;e?(n="next",a="previous"):(n="previous",a="next"),y("cubeEffect")?"previous"===n?o=t.slideWidth:"next"===n&&(o=-1*t.slideWidth):o=-1*k(c[n])[0],$(r,o,600,null),setTimeout(function(){if(y("rtl")){var e=n;n=a,a=e}if(""!==n&&c[n]&&""!==a){var t=c[n].getAttribute("data-story-id");g.internalData.currentStory=t;var o=i("#zuck-modal .story-viewer.".concat(a));o&&o.parentNode.removeChild(o),c.viewing&&(c.viewing.classList.add("stopped"),c.viewing.classList.add(a),c.viewing.classList.remove("viewing")),c[n]&&(c[n].classList.remove("stopped"),c[n].classList.remove(n),c[n].classList.add("viewing"));var s=L(n);s&&p(s,n);var d=g.internalData.currentStory,u=i('#zuck-modal [data-story-id="'.concat(d,'"]'));if(u){var m=(u=u.querySelectorAll("[data-index].active"))[0].firstElementChild;g.data[d].currentItem=parseInt(u[0].getAttribute("data-index"),10),u[0].innerHTML='<b style="'.concat(m.style.cssText,'"></b>'),l(u[0].firstElementChild,function(){g.nextItem(!1)})}if($(r,"0",0,null),u){var v=i('#zuck-modal .story-viewer[data-story-id="'.concat(t,'"]'));S(v,[u[0],u[1]],!0)}y("callbacks","onView")(g.internalData.currentStory)}},650)},p=function(e,t,n){var a=i("#zuck-modal-slider-".concat(w)),c=o(e,"items");e.timeAgo=c&&c[0]?b(o(c[0],"time")):"";var s="",u="",m=o(e,"id"),v=document.createElement("div"),f=o(e,"currentItem")||0;if(i('#zuck-modal .story-viewer[data-story-id="'.concat(m,'"]')))return!1;v.className="slides",r(c,function(t,n){n.timeAgo=b(o(n,"time")),f>t&&(e.items[t].timeAgo=n.timeAgo,e.items[t].seen=!0,n.seen=!0),u+=y("template","viewerItemPointer")(t,f,n),s+=y("template","viewerItemBody")(t,f,n)}),v.innerHTML=s;var p=v.querySelector("video"),h=function(e){e.muted?k.classList.add("muted"):k.classList.remove("muted")};p&&(p.onwaiting=function(e){p.paused&&(k.classList.add("paused"),k.classList.add("loading"))},p.onplay=function(){h(p),k.classList.remove("stopped"),k.classList.remove("paused"),k.classList.remove("loading")},p.onload=p.onplaying=p.oncanplay=function(){h(p),k.classList.remove("loading")},p.onvolumechange=function(){h(p)});var $=document.createElement("div");$.innerHTML=y("template","viewerItem")(e,f);var k=$.firstElementChild;k.className="story-viewer muted ".concat(t," ").concat(n?"":"stopped"," ").concat(y("backButton")?"with-back-button":""),k.setAttribute("data-story-id",m),k.querySelector(".slides-pointers .wrap").innerHTML=u,r(k.querySelectorAll(".close, .back"),function(e,t){t.onclick=function(e){e.preventDefault(),A.close()}}),k.appendChild(v),"viewing"===t&&S(k,k.querySelectorAll('[data-index="'.concat(f,'"].active')),!1),r(k.querySelectorAll(".slides-pointers [data-index] > b"),function(e,t){l(t,function(){g.nextItem(!1)})}),"previous"===t?d(a,k):a.appendChild(k)},{show:function(e,t){var n=i("#zuck-modal");y("callbacks","onOpen")(e,function(){v.innerHTML='<div id="zuck-modal-slider-'.concat(w,'" class="slider"></div>');var t,o,r,c,s,l,d,u,m,b,_,A,x=g.data[e],I=x.currentItem||0;t=i("#zuck-modal-slider-".concat(w)),o=i("#zuck-modal"),r=t,c={},s=null,l=null,d=null,u=null,m=null,b=function(e){var t=i("#zuck-modal .viewing");if("A"!==e.target.nodeName){var n=e.touches?e.touches[0]:e,a=k(i("#zuck-modal .story-viewer.viewing"));o.slideWidth=i("#zuck-modal .story-viewer").offsetWidth,o.slideHeight=i("#zuck-modal .story-viewer").offsetHeight,c={x:a[0],y:a[1]};var v=n.clientX,f=n.clientY;s={x:v,y:f,time:Date.now(),valid:!0},f<80||f>o.slideHeight-80?s.valid=!1:(e.preventDefault(),l=void 0,d={},r.addEventListener("mousemove",_),r.addEventListener("mouseup",A),r.addEventListener("mouseleave",A),r.addEventListener("touchmove",_),r.addEventListener("touchend",A),t&&t.classList.add("paused"),E(),u=setTimeout(function(){t.classList.add("longPress")},600),m=setTimeout(function(){clearInterval(m),m=!1},250))}},_=function(e){var t=e.touches?e.touches[0]:e,n=t.clientX,a=t.clientY;s&&s.valid&&(d={x:n-s.x,y:a-s.y},void 0===l&&(l=!!(l||Math.abs(d.x)<Math.abs(d.y))),!l&&s&&(e.preventDefault(),$(r,c.x+d.x,0,null)))},A=function e(t){var n=i("#zuck-modal .viewing"),v=s,p=300>Number(s?Date.now()-s.time:void 0)&&Math.abs(d.x)>25||Math.abs(d.x)>o.slideWidth/3,h=d.x<0,k=i(h?"#zuck-modal .story-viewer.next":"#zuck-modal .story-viewer.previous");if(s&&!s.valid);else{d&&(l||(p&&!(h&&!k||!h&&!k)?f(h):$(r,c.x,300)),s=void 0,r.removeEventListener("mousemove",_),r.removeEventListener("mouseup",e),r.removeEventListener("mouseleave",e),r.removeEventListener("touchmove",_),r.removeEventListener("touchend",e));var b=g.internalData.currentVideoElement;if(u&&clearInterval(u),n&&(S(n,n.querySelectorAll(".active"),!1),n.classList.remove("longPress"),n.classList.remove("paused")),m){clearInterval(m),m=!1;var w=function(){h||(v.x>a.screen.availWidth/3||!y("previousTap")?y("rtl")?g.navigateItem("previous",t):g.navigateItem("next",t):y("rtl")?g.navigateItem("next",t):g.navigateItem("previous",t))},A=i("#zuck-modal .viewing");if(!A||!b)return w(),!1;A.classList.contains("muted")?z(b,A):w()}}},r.addEventListener("touchstart",b),r.addEventListener("mousedown",b),g.internalData.currentStory=e,x.currentItem=I,y("backNative")&&(a.location.hash="#!".concat(w));var T=L("previous");T&&p(T,"previous"),p(x,"viewing",!0);var D=L("next");D&&p(D,"next"),y("autoFullScreen")&&n.classList.add("fullscreen");var C=function(){n.classList.contains("fullscreen")&&y("autoFullScreen")&&a.screen.availWidth<=1024&&h(n),n.focus()};if(y("openEffect")){var q=i("#".concat(w,' [data-id="').concat(e,'"] .item-preview')),N=k(q);n.style.marginLeft="".concat(N[0]+q.offsetWidth/2,"px"),n.style.marginTop="".concat(N[1]+q.offsetHeight/2,"px"),n.style.display="block",n.slideWidth=i("#zuck-modal .story-viewer").offsetWidth,setTimeout(function(){n.classList.add("animated")},10),setTimeout(function(){C()},300)}else n.style.display="block",n.slideWidth=i("#zuck-modal .story-viewer").offsetWidth,C();y("callbacks","onView")(e)})},next:function(e){y("callbacks","onEnd")(g.internalData.currentStory,function(){var e=g.internalData.currentStory,t=i("#".concat(w,' [data-id="').concat(e,'"]'));t&&(t.classList.add("seen"),g.data[e].seen=!0,g.internalData.seenItems[e]=!0,T("seenItems",g.internalData.seenItems),I()),i("#zuck-modal .story-viewer.next")?y("rtl")?f(!1):f(!0):A.close()})},close:function(){var e=i("#zuck-modal");y("callbacks","onClose")(g.internalData.currentStory,function(){y("backNative")&&(a.location.hash=""),h(e,!0),y("openEffect")?e.classList.add("closed"):(v.innerHTML="",e.style.display="none")})}}),x=function(e,t){var n=e.getAttribute("data-id"),a=!1;g.internalData.seenItems[n]&&(a=!0);try{g.data[n]||(g.data[n]={}),g.data[n].id=n,g.data[n].photo=e.getAttribute("data-photo"),g.data[n].name=e.querySelector(".name").innerText,g.data[n].link=e.querySelector(".item-link").getAttribute("href"),g.data[n].lastUpdated=e.getAttribute("data-last-updated"),g.data[n].seen=a,g.data[n].items||(g.data[n].items=[],g.data[n].noItems=!0)}catch(i){g.data[n]={items:[]}}e.onclick=function(e){e.preventDefault(),A.show(n)};var o=y("callbacks","onDataUpdate");o&&o(g.data,function(){})},L=function(e){var t=g.internalData.currentStory,n="".concat(e,"ElementSibling");if(t){var a=i("#".concat(w,' [data-id="').concat(t,'"]'))[n];if(a){var o=a.getAttribute("data-id");return g.data[o]||!1}}return!1},I=function(){r(document.querySelectorAll("#".concat(w," .story.seen")),function(e,t){var n=g.data[t.getAttribute("data-id")],a=t.parentNode;y("reactive")||a.removeChild(t),g.update(n,!0)})},S=function(e,t,n){var a=t[1],i=t[0];if(!a||!i)return!1;var o=g.internalData.currentVideoElement;if(o&&o.pause(),"video"===a.getAttribute("data-type")){var r=a.getElementsByTagName("video")[0];if(!r)return g.internalData.currentVideoElement=!1,!1;var s=function(){r.duration&&c(i.getElementsByTagName("b")[0].style,"AnimationDuration","".concat(r.duration,"s"))};s(),r.addEventListener("loadedmetadata",s),g.internalData.currentVideoElement=r,r.play(),n&&n.target&&z(r,e)}else g.internalData.currentVideoElement=!1},E=function(){var e=g.internalData.currentVideoElement;if(e)try{e.pause()}catch(t){}},z=function(e,t){e.muted=!1,e.volume=1,e.removeAttribute("muted"),e.play(),e.paused&&(e.muted=!0,e.play()),t&&t.classList.remove("paused")},T=function(e,t){try{if(y("localStorage")){var n="zuck-".concat(w,"-").concat(e);a.localStorage[n]=JSON.stringify(t)}}catch(i){}},D=function(e){if(y("localStorage")){var t="zuck-".concat(w,"-").concat(e);return!!a.localStorage[t]&&JSON.parse(a.localStorage[t])}return!1};return g.data=y("stories")||{},g.internalData={},g.internalData.seenItems=D("seenItems")||{},g.add=g.update=function(t,n){var a,c=o(t,"id"),s=i("#".concat(w,' [data-id="').concat(c,'"]')),l=o(t,"items"),u=!1;if(l[0]&&(u=l[0].preview||""),!0===g.internalData.seenItems[c]&&(t.seen=!0),t.currentPreview=u,s)a=s;else{var m=document.createElement("div");m.innerHTML=y("template","timelineItem")(t),a=m.firstElementChild}!1===t.seen&&(g.internalData.seenItems[c]=!1,T("seenItems",g.internalData.seenItems)),a.setAttribute("data-id",c),a.setAttribute("data-photo",o(t,"photo")),a.setAttribute("data-last-updated",o(t,"lastUpdated")),x(a),s||y("reactive")||(n?e.appendChild(a):d(e,a)),r(l,function(e,t){g.addItem(c,t,n)}),n||I()},g.next=function(){A.next()},g.remove=function(e){var t=i("#".concat(w,' > [data-id="').concat(e,'"]'));t.parentNode.removeChild(t)},g.addItem=function(e,t,n){var a=i("#".concat(w,' > [data-id="').concat(e,'"]'));if(!y("reactive")){var c=document.createElement("li"),s=a.querySelectorAll(".items")[0];c.className=o(t,"seen")?"seen":"",c.setAttribute("data-id",o(t,"id")),c.innerHTML=y("template","timelineStoryItem")(t),n?s.appendChild(c):d(s,c)}!function(e,t){var n=e.getAttribute("data-id"),a=document.querySelectorAll("#".concat(w,' [data-id="').concat(n,'"] .items > li')),i=[];if(!y("reactive")){r(a,function(e,t){for(var n=t.firstElementChild,a=n.firstElementChild,o={id:n.getAttribute("data-id"),src:n.getAttribute("href"),length:n.getAttribute("data-length"),type:n.getAttribute("data-type"),time:n.getAttribute("data-time"),link:n.getAttribute("data-link"),linkText:n.getAttribute("data-linkText"),preview:a.getAttribute("src")},r=n.attributes,c=["data-id","href","data-length","data-type","data-time","data-link","data-linktext"],s=0;s<r.length;s++)-1===c.indexOf(r[s].nodeName)&&(o[r[s].nodeName.replace("data-","")]=r[s].nodeValue);i.push(o)}),g.data[n].items=i;var o=y("callbacks","onDataUpdate");o&&o(g.data,function(){})}}(a)},g.removeItem=function(t,n){var a=i("#".concat(w,' > [data-id="').concat(t,'"] [data-id="').concat(n,'"]'));y("reactive")||e.parentNode.removeChild(a)},g.navigateItem=g.nextItem=function(e,t){var n=g.internalData.currentStory,a=g.data[n].currentItem,o=i('#zuck-modal .story-viewer[data-story-id="'.concat(n,'"]')),c="previous"===e?-1:1;if(!o||1===o.touchMove)return!1;var s=o.querySelectorAll('[data-index="'.concat(a,'"]')),l=s[0],d=s[1],u=o.querySelectorAll('[data-index="'.concat(a+c,'"]')),m=u[0],v=u[1];if(o&&m&&v){var f=y("callbacks","onNavigateItem");(f=y("callbacks",f?"onNavigateItem":"onNextItem"))(n,v.getAttribute("data-story-id"),function(){"previous"===e?(l.classList.remove("seen"),d.classList.remove("seen")):(l.classList.add("seen"),d.classList.add("seen")),l.classList.remove("active"),d.classList.remove("active"),m.classList.remove("seen"),m.classList.add("active"),v.classList.remove("seen"),v.classList.add("active"),r(o.querySelectorAll(".time"),function(e,t){t.innerText=b(v.getAttribute("data-time"))}),g.data[n].currentItem=g.data[n].currentItem+c,S(o,u,t)})}else o&&"previous"!==e&&A.next(t)},function(){if(e&&e.querySelector(".story")&&r(e.querySelectorAll(".story"),function(e,t){x(t)}),y("backNative")&&(a.location.hash==="#!".concat(w)&&(a.location.hash=""),a.addEventListener("popstate",function(e){a.location.hash!=="#!".concat(w)&&(a.location.hash="")},!1)),!y("reactive")){var t=D("seenItems");r(Object.keys(t),function(e,n){g.data[n]&&(g.data[n].seen=t[n])})}r(y("stories"),function(e,t){g.add(t,!0)}),I();var n=y("avatars")?"user-icon":"story-preview",i=y("list")?"list":"carousel",o=y("rtl")?"rtl":"";return e.className+=" stories ".concat(n," ").concat(i," ").concat("".concat(y("skin")).toLowerCase()," ").concat(o),g}()}).buildTimelineItem=function(e,t,n,a,i,o){var c={id:e,photo:t,name:n,link:a,lastUpdated:i,items:[]};return r(o,function(e,t){c.items.push(u.buildStoryItem.apply(u,t))}),c},u.buildItem=u.buildStoryItem=function(e,t,n,a,i,o,r,c,s){return{id:e,type:t,length:n,src:a,preview:i,link:o,linkText:r,seen:c,time:s}},e.exports&&(t=e.exports=u),t.ZuckJS=u,u)}]),initDemo=function(){var e=location.href.split("skin=")[1];e||(e="Snapgram"),-1!==e.indexOf("#")&&(e=e.split("#")[0]);var t={Snapgram:{avatars:!0,list:!1,autoFullScreen:!1,cubeEffect:!0}};new Zuck("stories",{backNative:!0,previousTap:!0,autoFullScreen:t[e].autoFullScreen,skin:e,avatars:t[e].avatars,list:t[e].list,cubeEffect:t[e].cubeEffect,localStorage:!0,stories:[{id:"Documentation_1",photo:"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhH5cUkxZrCunqSL1dDBr363KY3T3LrBGexiP9hudCw_W3-TvwRUKR8V40iSjwplgkrNQCfU-sLTZJcfEv-Ws8obWPEb9s5QoLLqOR7LVtKWb39GagUaeQSm-YoIpL4WnX8OQW-kU2eJ2hnq5b27mxc7PW3kL7dmUxoNnRs7nFocdSVOQ/w72-h72-p-k-no-nu/samuelpasaribu.webp",name:"Haxor",link:"",items:[Zuck.buildItem("VuliaTheme","photo",5,"https://cdn.jsdelivr.net/gh/zonemedia/okemedia/img/api.gif","",!1,!1),Zuck.buildItem("VuliaTheme","photo",5,"https://cdn.jsdelivr.net/gh/zonemedia/okemedia/img/programmer.gif","",!1,!1),Zuck.buildItem("VuliaTheme","photo",5,"https://cdn.jsdelivr.net/gh/zonemedia/okemedia/img/website.gif","","https://www.samuelpasaribu.com/",!1),]},{id:"Ishar-1",photo:"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgLqeB29NDEv08TuZ0lnglsYfzfhV2lkd5sL-g8BaMESOgOmLbpKdM5clO-YdbiL5PnNJl_cezgSDQpge-l_M89ICR0cLO1w7e69geEtMeA43A4eesNj8mVGHp1defOGFttPKC8XR-Xjp_Gk8q5z4iqn2PFpl_C-YMnyr4UEZ0m6vYhlQ/w72-h72-p-k-no-nu/profil.png",name:"AI",link:"",items:[Zuck.buildItem("IsharYulianSatriani","photo",5,"https://cdn.jsdelivr.net/gh/zonemedia/okemedia/img/samuelganteng.gif","",!1,!1),Zuck.buildItem("IsharYulianSatriani","photo",5,"https://cdn.jsdelivr.net/gh/zonemedia/okemedia/img/siluman.gif","",!1,!1),Zuck.buildItem("IsharYulianSatriani","photo",5,"https://cdn.jsdelivr.net/gh/zonemedia/okemedia/img/giphy-hacking.gif","",!1,!1),]}]});for(var n=document.querySelectorAll("#skin option"),a=n.length,i=0;i<a;i++){var o=e==n[i].value;o?n[i].setAttribute("selected",o):n[i].removeAttribute("selected")}};initDemo();
var images=document.querySelectorAll(".story img"),imageAltDescriptions=["Deskripsi gambar 1","Deskripsi gambar 2","Deskripsi gambar 3","Deskripsi gambar 4","Deskripsi gambar 5"];images.forEach(function(i,s){imageAltDescriptions[s]&&(i.alt=imageAltDescriptions[s])});
  // Fungsi untuk menampilkan dan menyembunyikan form WhatsApp
  $(".form-close").click(function() {
    $(".samuelpasaribu-form-wa").fadeOut("fast");
});

$(".show-form").click(function() {
    $(".samuelpasaribu-form-wa").fadeIn("slow");
});

// Fungsi untuk validasi kolom wajib diisi
$('.samuelpasaribu-input-field .validate').each(function() {
    title = $(this).attr('name');
    label = $(this).parents('.samuelpasaribu-input-field');
    $('<span class="samuelpasaribu-validasi"><b>' + title + '</b> diperlukan</span>').appendTo(label);
});

$(document).on('keyup', '.samuelpasaribu-input-field .validate', function() {
    if ($(this).val() != '') {
        $(this).removeClass('focus');
        $(this).parents('.samuelpasaribu-input-field').find('.samuelpasaribu-validasi').removeClass('show');
    }
});

$(document).on('change', '.samuelpasaribu-input-field select', function() {
    $(this).removeClass('focus');
    $(this).parents('.samuelpasaribu-input-field').find('.samuelpasaribu-validasi').removeClass('show');
});

// Fungsi untuk mengambil geolokasi pengguna
function getGeolocation() {
    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
            function(position) {
                var latitude = position.coords.latitude;
                var longitude = position.coords.longitude;
                var googleMapsLink = 'https://www.google.com/maps?q=' + latitude + ',' + longitude;
                $("#wa_alamat").val(googleMapsLink);
                // Hilangkan pesan validasi jika alamat terisi
                $("#wa_alamat").removeClass('focus').parents('.samuelpasaribu-input-field').find('.samuelpasaribu-validasi').removeClass('show');
            },
            function(error) {
                console.log('Gagal mengambil lokasi: ' + error.message);
            }
        );
    } else {
        console.log('Geolokasi tidak didukung di browser Anda.');
    }
}

// Fungsi untuk mengirim pesan WhatsApp saat tombol "KIRIM" diklik
$('#order-form').submit(function(e) {
    e.preventDefault();
    var isValid = true;

    $('.samuelpasaribu-input-field .validate').each(function() {
        if ($(this).val() == '') {
            $(this).addClass('focus');
            $(this).parents('.samuelpasaribu-input-field').find('.samuelpasaribu-validasi').addClass('show');
            isValid = false;
        }
    });

    if ($('#wa_lisensi').val() == 'default') { // Validasi Lisensi
        $('#wa_lisensi').addClass('focus').parents('.samuelpasaribu-input-field').find('.samuelpasaribu-validasi').addClass('show');
        isValid = false;
    }

    if ($('#wa_pembayaran').val() == 'default') { // Validasi Pembayaran
        $('#wa_pembayaran').addClass('focus').parents('.samuelpasaribu-input-field').find('.samuelpasaribu-validasi').addClass('show');
        isValid = false;
    }

    if (input_alamat == '') {
        $("#wa_alamat").addClass('focus').parents('.samuelpasaribu-input-field').find('.samuelpasaribu-validasi').addClass('show');
        isValid = false;
    }

    if (!isValid) {
        return false;
    } else {
        // Pengaturan WhatsApp
        var walink = 'https://web.whatsapp.com/send',
            phone = '6285960306011', // Ganti dengan nomor WhatsApp Anda
            walink2 = 'Halo, saya ingin membeli produk anda dengan keterangan berikut:\n\n';

        // Dukungan Smartphone
        if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
            var walink = 'whatsapp://send';
        }

        // Formulir Input Panggilan
        var input_nama = $("#wa_nama").val(),
            input_email = $("#wa_email").val(),
            input_namaBlog = $("#wa_blog").val(),
            input_urlBlog = $("#wa_url").val(),
            input_alamat = $("#wa_alamat").val(),
            input_lisensi = $("#wa_lisensi :selected").text(),
            input_pembayaran = $("#wa_pembayaran :selected").text(),
            input_namaproduk = $("#nama_produk").text(),
            input_viaUrl = location.href,
            input_totalPembayaran = $("#wa_total_pembayaran").val(); // Menambahkan input total pembayaran

        // URL Final WhatsApp
        var samuelpasaribu_whatsapp = walink + '?phone=' + phone + '&text=' + encodeURIComponent(walink2 +
            '*DATA SAYA*\n' +
            '=======================\n' +
            '*Nama* : ' + input_nama + '\n' +
            '*Email* : ' + input_email + '\n' +
            '*Total Pembayaran* : IDR.' + input_totalPembayaran + '\n' + // Menggunakan total pembayaran yang telah dihitung
            '*URL Blog* : ' + input_urlBlog + '\n' +
            '*Lokasi* : ' + input_alamat + '\n' +
            '*Metode Pembayaran* : ' + input_pembayaran + '\n' +
            '=======================\n\n' +
            '*DAFTAR BELANJAAN*\n' +
            '=======================\n' +
            '*Nama Produk* : ' + input_namaproduk + '\n' +
            '*Jenis Lisensi* : ' + input_lisensi + '\n' +
            '*Link Produk* : ' + input_viaUrl + '\n' +
            '=======================');

        // Buka Jendela WhatsApp
        window.open(samuelpasaribu_whatsapp, '_blank');
        window.location.href = input_viaUrl;
        return false;
    }
});

// Fungsi untuk mereset form
$('.reset_form').click(function() {
    $('#order-form')[0].reset();
    $('#wa_lisensi, #wa_pembayaran').val('default');
    $('.samuelpasaribu-input-field .validate').removeClass('focus');
    $('.samuelpasaribu-input-field .samuelpasaribu-validasi').removeClass('show');
});
const targetDomain = 'www.haxorai.com';

function createAlertBox(message) {
  const alertBox = document.createElement('div');
  alertBox.setAttribute('id', 'alertBox');
  alertBox.style.position = 'fixed';
  alertBox.style.top = '50px';
  alertBox.style.left = '50%';
  alertBox.style.transform = 'translateX(-50%)';
  alertBox.style.backgroundColor = '#f2f2f2';
  alertBox.style.border = '1px solid #ddd';
  alertBox.style.borderRadius = '5px';
  alertBox.style.padding = '20px';
  alertBox.style.boxShadow = '0 2px 4px rgba(0,0,0,0.2)';
  alertBox.style.zIndex = '9999';
  alertBox.innerHTML = `<strong>PERINGATAN!</strong> ${message}`;
  document.body.appendChild(alertBox);

  setTimeout(() => {
    document.body.removeChild(alertBox);
    window.location.href = 'https://www.haxorai.com';
  }, 10000);
}

const currentDomain = window.location.hostname;

if (currentDomain !== targetDomain) {
  createAlertBox('Sumber Daya Ini Diamankan Oleh Ahli Keamanan. Dilarang Mengakses Tanpa Izin.');
}';
function runDecryptedCode(encryptedCode) {
    const decodedCode = atob(encryptedCode);
    eval(decodedCode);
}
runDecryptedCode(encryptedCode);
